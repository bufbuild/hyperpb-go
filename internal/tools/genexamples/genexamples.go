// Copyright 2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// genexamples is a script for generating the examples helper package, which
// contains encoded messages that appear in examples.
//
// Examples are defined by comments in the file containing the go:generate
// comment, of the following form:
//
//	//hyperpb:example MyExample
//	// // MyExample returns blah.
//	// 1: ...
//	// 2: ...
//
// The Protoscope text continues until the first non-comment line.
package main

import (
	"bytes"
	"fmt"
	"os"
	"regexp"
	"strings"

	"github.com/protocolbuffers/protoscope"
)

var pattern = regexp.MustCompile(`//hyperpb:example\s+(\w+)\s*\n`)

// directive is a //hyperpb:example directive, as described in the package
// documentation.
type directive struct {
	Func       string // Generated function name.
	Comment    []byte // Function doc comment.
	Protoscope []byte // Protoscope string.
}

// parseDirectives parses all [directive]s in a Go file.
func parseDirectives(input string) []*directive {
	matches := pattern.FindAllStringSubmatchIndex(input, -1)
	out := make([]*directive, len(matches))
	for i, match := range matches {
		d := &directive{
			Func: input[match[2]:match[3]],
		}
		rest := input[match[1]:]
		for rest != "" {
			var line string
			line, rest, _ = strings.Cut(rest, "\n")
			line = strings.TrimSpace(line)

			if line == "//" {
				continue
			}

			if !strings.HasPrefix(line, "// ") {
				break
			}
			line = strings.TrimPrefix(line, "// ")

			if strings.HasPrefix(line, "//") {
				d.Comment = append(d.Comment, line...)
				d.Comment = append(d.Comment, '\n')
			} else {
				d.Protoscope = append(d.Protoscope, line...)
				d.Protoscope = append(d.Protoscope, '\n')
			}
		}

		out[i] = d
	}

	return out
}

// generate prints out the function this directive specifies.
func (d *directive) generate(out *bytes.Buffer) error {
	data, err := protoscope.NewScanner(string(d.Protoscope)).Exec()
	if err != nil {
		return err
	}

	fmt.Fprintf(out, "%s", d.Comment)
	fmt.Fprintf(out, "func %s() []byte {\n", d.Func)
	fmt.Fprintf(out, "\treturn []byte{")
	for i, b := range data {
		if i%12 == 0 {
			fmt.Fprint(out, "\n\t\t")
		} else {
			fmt.Fprint(out, " ")
		}
		fmt.Fprintf(out, "0x%02x,", b)
	}
	fmt.Fprintf(out, "\n\t}\n")
	fmt.Fprintf(out, "}\n")

	return nil
}

func run() error {
	path := os.Getenv("GOFILE")
	input, err := os.ReadFile(path)
	if err != nil {
		return err
	}

	out := new(bytes.Buffer)
	fmt.Fprintf(out, "// Code generated by ./internal/tools/genexamples. DO NOT EDIT.\n\n")
	fmt.Fprintf(out, "package %s\n", os.Getenv("GOPACKAGE"))

	for _, d := range parseDirectives(string(input)) {
		fmt.Fprintln(out)
		if err := d.generate(out); err != nil {
			return err
		}
	}

	return os.WriteFile(strings.TrimSuffix(path, ".go")+".gen.go", out.Bytes(), 0o666)
}

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
