// Copyright 2020-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fastpb

// Code generated by internal/stencil. DO NOT EDIT

import "github.com/bufbuild/fastpb/internal/unsafe2"

//go:nosplit
func parseOneofVarint32(p1 parser1, p2 parser2) (parser1, parser2) {
	_ = parseOneofVarint[uint32]
	p1, p2, p2.scratch = p1.varint(p2)
	p1, p2 = storeFromScratch[uint32](p1, p2)
	unsafe2.ByteStore(p2.m(), p2.f().offset.bit, p2.f().offset.number)

	return p1, p2
}

//go:nosplit
func parseOneofVarint64(p1 parser1, p2 parser2) (parser1, parser2) {
	_ = parseOneofVarint[uint64]
	p1, p2, p2.scratch = p1.varint(p2)
	p1, p2 = storeFromScratch[uint64](p1, p2)
	unsafe2.ByteStore(p2.m(), p2.f().offset.bit, p2.f().offset.number)

	return p1, p2
}

//go:nosplit
func parseOneofZigZag32(p1 parser1, p2 parser2) (parser1, parser2) {
	_ = parseOneofZigZag[uint32]
	p1, p2, p2.scratch = p1.varint(p2)
	p2.scratch = uint64(zigzag64[uint32](p2.scratch))
	p1, p2 = storeFromScratch[uint32](p1, p2)
	unsafe2.ByteStore(p2.m(), p2.f().offset.bit, p2.f().offset.number)

	return p1, p2
}

//go:nosplit
func parseOneofZigZag64(p1 parser1, p2 parser2) (parser1, parser2) {
	_ = parseOneofZigZag[uint64]
	p1, p2, p2.scratch = p1.varint(p2)
	p2.scratch = uint64(zigzag64[uint64](p2.scratch))
	p1, p2 = storeFromScratch[uint64](p1, p2)
	unsafe2.ByteStore(p2.m(), p2.f().offset.bit, p2.f().offset.number)

	return p1, p2
}
